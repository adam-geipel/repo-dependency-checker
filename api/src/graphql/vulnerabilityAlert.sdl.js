/*
export const schema = gql`
  type RepositoryVulnerabilityAlert {
    autoDismissedAt: String!
    createdAt: String
    dismissComment: String
    dismissReason: String
    dismissedAt: String
    fixedAt: String
    id: String!
    number: String!
    vulnerableManifestFilename: String!
    vulnerableManifestPath: String
    vulnerableRequirements: String
  }

  type Query {
    getRepositoryVulnerabilityAlert(
      owner: String
      repository: String
    ): RepositoryVulnerabilityAlert @skipAuth
  }
`
*/
export const schema = gql`
  type Data {
    level: Int
    time: Float
    pid: Int
    hostname: String
    repository: Repository
  }

  type Repository {
    vulnerabilityAlerts: [RepositoryVulnerabilityAlert]
  }

  type RepositoryVulnerabilityAlert {
    autoDismissedAt: String
    createdAt: String
    dismissComment: String
    dismissReason: String
    dismissedAt: String
    fixedAt: String
    id: String!
    number: String
    state: String
    vulnerableManifestFilename: String
    vulnerableManifestPath: String
    vulnerableRequirements: String
    securityVulnerability: SecurityVulnerability
    repository: String
  }

  type SecurityVulnerability {
    package: Package
    advisory: Advisory
  }

  type Package {
    name: String
  }

  type Advisory {
    description: String
  }

  type Query {
    getRepositoryVulnerabilityAlerts(
      owner: String!
      repository: String!
    ): [RepositoryVulnerabilityAlert]! @skipAuth
  }

  type Query {
    getRepositoryVulnerabilityAlert(
      owner: String!
      repository: String!
      id: String!
    ): RepositoryVulnerabilityAlert @skipAuth
  }
`
