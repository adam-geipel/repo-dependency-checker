import { gql, GraphQLClient } from 'graphql-request'

const graphQLClient = new GraphQLClient('https://api.github.com/graphql', {
  headers: {
    authorization: 'Bearer ' + process.env.GITHUB_TOKEN,
  },
})

const getRepositoryVulnerabilityAlerts = async ({ repository, owner }) => {
  // call the github graphql API to get the vulnerability alerts for the repository
  // and store it to a constant object variable
  const queryStr = `
    {
      repository(name: "${repository}", owner: "${owner}") {
        vulnerabilityAlerts(first: 100) {
          nodes {
            id
            createdAt
            dismissedAt
            fixedAt
            securityVulnerability {
              package {
                name
              }
              advisory {
                description
              }
            }
          }
        }
      }
    }
  `
  const query = gql`
    ${queryStr}
  `

  const results = await graphQLClient.request(query)

  const distinctNodes = results.repository.vulnerabilityAlerts.nodes
    .filter((node) => !node.securityVulnerability.fixedAt)
    // filter to only get uniquely named packages with the most recent createdAt date
    .reduce((acc, node) => {
      if (
        !acc[node.securityVulnerability.package.name] ||
        acc[node.securityVulnerability.package.name].createdAt < node.createdAt
      ) {
        acc[node.securityVulnerability.package.name] = node
      }
      return acc
    }, {})

  return Object.values(distinctNodes).sort((a, b) =>
    a.createdAt > b.createdAt ? -1 : 1
  )
}

const getRepositoryVulnerabilityAlert = async ({ repository, owner, id }) => {
  // call the github graphql API to get the vulnerability alerts for the repository
  // and store it to a constant object variable
  const queryStr = `
    {
      repository(name: "${repository}", owner: "${owner}") {
        vulnerabilityAlerts(first: 100) {
          nodes {
            id
            createdAt
            dismissedAt
            fixedAt
            securityVulnerability {
              package {
                name
              }
              advisory {
                description
              }
            }
          }
        }
      }
    }
  `
  const query = gql`
    ${queryStr}
  `
  const results = await graphQLClient.request(query)

  return results.repository.vulnerabilityAlerts.nodes.find(
    (node) => node.id === id
  )
}

module.exports = {
  getRepositoryVulnerabilityAlerts,
  getRepositoryVulnerabilityAlert,
}
